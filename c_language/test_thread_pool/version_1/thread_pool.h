///////////////////////////////////////////////////////
// title: 
//    实现一个生产者消费者的任务队列工具库 
// 
// instruction:
//    将任务队列做成一个链表，生产者在队列尾部加入任务，
// 消费者在队列头部取出任务
///////////////////////////////////////////////////////
#pragma once 

#include <pthread.h>

struct task{
  struct task*   _pNext;
  int            _value;
};

//用于管理线程池的结构体
struct thread_info{
  int              _thread_running;
  int              _thread_num;
  int              _task_num;
  struct task*     _tasks;
  pthread_t*       _thread_id;
  pthread_mutex_t  _mutex; //互斥量
  pthread_cond_t   _cond; //条件变量
};

///////////////////////////////////////////////////////
// 初始化线程池线程数目
// @param thread_num : default 8
///////////////////////////////////////////////////////
void init_thread_pool(int thread_num);

//销毁线程池
void destroy_thread_pool();

///////////////////////////////////////////////////////
// 向任务池中添加新任务 
// @param t: 需要添加的任务
///////////////////////////////////////////////////////
void thread_pool_add_task(struct task* t);

///////////////////////////////////////////////////////
// 从任务池中取出一个任务
// @return 返回得到的任务
///////////////////////////////////////////////////////
struct task* thread_pool_retrieve_task();

///////////////////////////////////////////////////////
// 执行任务池中的任务
// @param t: 需要执行的任务
///////////////////////////////////////////////////////
void thread_pool_do_task(struct task* t);

///////////////////////////////////////////////////////
// 线程函数
// @param thread_param: 线程参数
///////////////////////////////////////////////////////
void* thread_routine(void* thread_param);


